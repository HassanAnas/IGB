<ModalHeader>
    <ModalTitle>Tutor Document</ModalTitle>
    <Blazorise.CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    @if (TutorDocument != null && TutorDocument.File != null)
    {
        <div>
            <iframe src="data:application/pdf;base64,@Base64Pdf" width="100%" height="600px"></iframe>
        </div>
    }
    else
    {
        <h1>First Save Into Database</h1>
    }

</ModalBody>
<ModalFooter>
    <Blazorise.Button Color="Color.Success" Clicked="Close">Close</Blazorise.Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; }
    [Inject] public ApplicationDbContext context { get; set; }

    [Parameter]
    public long? Id { get; set; }

    private string Base64Pdf { get; set; }
    private TutorDocument? TutorDocument;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id != null)
            {
                var documentId = Convert.ToInt64(Id);
                TutorDocument = await context.TutorDocuments.FindAsync(documentId);

                if (TutorDocument?.File != null)
                {
                    Base64Pdf = Convert.ToBase64String(TutorDocument.File);
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception here, such as logging or displaying an error message
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
    private async Task Close()
    {
        await ModalService.Hide();
    }
}
