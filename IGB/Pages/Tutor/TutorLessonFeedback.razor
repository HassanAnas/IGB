@page "/TutorLessonFeedback/{LessonBookingId?}"

@inject NavigationManager NavigationManager
@inject ApplicationDbContext context
@inject IJSRuntime JSRuntime

@attribute [Authorize(Roles = "Tutor")]

<h3>Tutor Feedback</h3>

@if (LessonBooking != null)
{
    <label>Date:</label>
    <input type="text" value="@((LessonBooking.StartTime.HasValue ? LessonBooking.StartTime.Value.Date.ToString("yyyy-MM-dd") : ""))" class="form-control" disabled />

    <label>Tutor Check In:</label>
    <input type="text" @bind="LessonBooking.TutorComingTime" class="form-control" disabled />

    <label>Tutor Check Out:</label>
    <input type="text" @bind="LessonBooking.TutorCheckoutTime" class="form-control" disabled />

    <label>Tutor Session Time:</label>
    <input type="text" @bind="LessonBooking.SessionTutorTime" class="form-control" disabled />

    <label>Session Time:</label>
    <input type="text" @bind="LessonBooking.SessionTime" class="form-control" disabled />

    @if (LessonBooking.CourseBookings.StudentApplicationUsers != null)
    {
        <label>Student Name:</label>
        <input type="text" @bind="LessonBooking.CourseBookings.StudentApplicationUsers.FirstName" class="form-control" disabled />

        <label>Student Tag:</label>
        <input type="text" @bind="LessonBooking.CourseBookings.StudentApplicationUsers.Tag" class="form-control" disabled />

        <label>Student School Name:</label>
        <input type="text" @bind="LessonBooking.CourseBookings.StudentApplicationUsers.SchoolName" class="form-control" disabled />

        <label>Student Curriculum:</label>
        <input type="text" @bind="LessonBooking.CourseBookings.StudentApplicationUsers.Curriculums.Name" class="form-control" disabled />

        <label>Student Curriculum:</label>
        <input type="text" @bind="LessonBooking.CourseBookings.StudentApplicationUsers.Grades.Name" class="form-control" disabled />
    }
    @if (LessonBooking.CourseBookings.TutorApplicationUsers != null)
    {
        <label>Tutor Name:</label>
        <input type="text" @bind="LessonBooking.CourseBookings.TutorApplicationUsers.FirstName" class="form-control" disabled />
    }
    @if (LessonBooking.CourseBookings.Courses != null)
    {
        <label>Course Name:</label>
        <input type="text" @bind="LessonBooking.CourseBookings.Courses.Name" class="form-control" disabled />
    }
    @if (LessonBooking.LessonName != null)
    {
        <label>Lesson Name:</label>
        <input type="text" @bind="LessonBooking.LessonName" class="form-control" disabled />

        <label>Topic Name:</label>
        <input type="text" @bind="LessonBooking.TopicCovered" class="form-control" disabled />
    }


}
@if (LessonBookingId != null)
{
    <EditForm Model="@TutorFeedback" OnValidSubmit="Create" OnInvalidSubmit="@HandleInvalidSubmit">

        <div class="form-group">

            <label>Previous Home Work Done</label>
            <input type="checkbox" @bind="TutorFeedback.PreviousHomeWorkDone" />
            <br/>

            <label>Previous HomeWork Discussed</label>
            <input type="checkbox" @bind="TutorFeedback.PreviousHomeWorkDiscussed" />
            <br/>

            <label>Topic Covered Today</label>
            <InputTextArea @bind-Value="TutorFeedback.TopicCoveredToday" class="form-control" />

            <label>Topic Understanding Level</label>
            <InputSelect @bind-Value="TutorFeedback.TopicUnderstandingLevel" class="form-control">
                <option value="" selected disabled>Select An Option</option>
                <option value="0.1">1</option>
                <option value="0.2">2</option>
                <option value="0.3">3</option>
                <option value="0.4">4</option>
                <option value="0.5">5</option>
                <option value="0.6">6</option>
                <option value="0.7">7</option>
                <option value="0.8">8</option>
                <option value="0.9">9</option>
                <option value="1">10</option>
            </InputSelect>

            <label>Grade Prediction</label>
            <InputSelect @bind-Value="TutorFeedback.GradePrediction" class="form-control">
                <option value="" selected disabled>Select An Option</option>
                <option value="A+">A+</option>
                <option value="A">A</option>
                <option value="B">B</option>
                <option value="C">C</option>
                <option value="D">D</option>
                <option value="E">E</option>
                <option value="F">F</option>               
            </InputSelect>

            <label>Average Grade Prediction</label>
            <InputText @bind-Value="TutorFeedback.AverageGradePrediction" class="form-control" disabled/>

            <label>Mental Skills</label>
            <InputSelect @bind-Value="TutorFeedback.MentalSkills" class="form-control">
                <option value="" selected disabled>Select An Option</option>
                <option value="0.1">1</option>
                <option value="0.2">2</option>
                <option value="0.3">3</option>
                <option value="0.4">4</option>
                <option value="0.5">5</option>
                <option value="0.6">6</option>
                <option value="0.7">7</option>
                <option value="0.8">8</option>
                <option value="0.9">9</option>
                <option value="1">10</option>
            </InputSelect>

            <label>Test Name</label>
            <InputText @bind-Value="TutorFeedback.TestName" class="form-control" />

            <label>Total Score</label>
            <InputNumber @bind-Value="TutorFeedback.TotalScore" class="form-control" />

            <label>Obtained Score</label>
            <InputNumber @bind-Value="TutorFeedback.ObtainedScore" class="form-control" />
            @{
                TutorFeedback.Percentage = TutorFeedback.ObtainedScore * 100 / TutorFeedback.TotalScore;
            }
            <label>Percentage</label>
            <InputNumber @bind-Value="TutorFeedback.Percentage" class="form-control" disabled />


            <label>Test File:</label>
            <InputFile OnChange="TestFileChange" class="form-control" />

            @if (TutorFeedback.TestFile != null)
            {
                TestFileBase64Pdf = Convert.ToBase64String(TutorFeedback.TestFile);
                <div style="width: 20%; height: 600px;">
                    <iframe src="data:application/pdf;base64,@TestFileBase64Pdf" width="100%" height="600px"></iframe>
                </div>
            }

            <label>Homework</label>
            <InputSelect @bind-Value="TutorFeedback.NextHomework" class="form-control">
                <option value="" selected disabled>Select An Option</option>
                <option value="">Given</option>
                <option value="Not Given">Not Given</option>
            </InputSelect>

            @if (TutorFeedback.NextHomework == "Given")
            {
                <label>Next Homeworrk File:</label>
                <InputFile OnChange=" NextHomeworkFileChange" class="form-control" />

                @if (TutorFeedback.NextHomeworkFile != null)
                {
                    NextHomeworkFileBase64Pdf = Convert.ToBase64String(TutorFeedback.NextHomeworkFile);
                    <div style="width: 20%; height: 600px;">
                        <iframe src="data:application/pdf;base64,@NextHomeworkFileBase64Pdf" width="100%" height="600px"></iframe>
                    </div>
                }
            }
       
            <label>Remarks</label>
            <InputText @bind-Value="TutorFeedback.Remarks" class="form-control" />


            <label>Announcement</label>
            <InputTextArea @bind-Value="TutorFeedback.Announcement" class="form-control" />

        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public string? LessonBookingId { get; set; }

    private TutorFeedback? TutorFeedback { get; set; } = new TutorFeedback();
    private LessonBooking? LessonBooking { get; set; } = new LessonBooking();

    protected override async Task OnInitializedAsync()
    {
        if (LessonBookingId != null)
        {
            Load();
        }

    }
    private void Load()
    {
        try
        {
            if (LessonBookingId != null)
            {
                TutorFeedback = new TutorFeedback();

                LessonBooking = context.LessonBookings
         .Include(x => x.CourseBookings).ThenInclude(x => x.Courses)
         .Include(x => x.CourseBookings).ThenInclude(x => x.StudentApplicationUsers).ThenInclude(x => x.Curriculums)
         .Include(x => x.CourseBookings).ThenInclude(x => x.StudentApplicationUsers).ThenInclude(x => x.Grades)
         .Include(x => x.CourseBookings).ThenInclude(x => x.AdminApplicationUsers)
         .Include(x => x.CourseBookings).ThenInclude(x => x.TutorApplicationUsers)
         .Where(x => x.Id == Convert.ToInt64(LessonBookingId))
         .FirstOrDefault();

                var Grades = context.TutorFeedbacks
               .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.StudentApplicationUsers)
               .Where(x => x.LessonBookings.CourseBookings.StudentApplicationUsers.Id == LessonBooking.CourseBookings.StudentApplicationUsers.Id)
               .Select(x => x.GradePredictionScore)
               .ToList();

                double? Grade = Grades.Sum();
                double? PredictionGrade = Grade/Grades.Count;

                if (PredictionGrade < 0.1)
                {
                    TutorFeedback.AverageGradePrediction = "F";
                }
                else if (PredictionGrade >= 0.1 && PredictionGrade < 0.2)
                {
                    TutorFeedback.AverageGradePrediction = "E";
                }
                else if (PredictionGrade >= 0.2 && PredictionGrade < 0.3)
                {
                    TutorFeedback.AverageGradePrediction = "D";
                }
                else if (PredictionGrade >= 0.3 && PredictionGrade < 0.5)
                {
                    TutorFeedback.AverageGradePrediction = "C";
                }
                else if (PredictionGrade >= 0.5 && PredictionGrade < 0.7)
                {
                    TutorFeedback.AverageGradePrediction = "B";
                }
                else if (PredictionGrade >= 0.7 && PredictionGrade < 0.9)
                {
                    TutorFeedback.AverageGradePrediction = "A";
                }
                else if (PredictionGrade >= 0.9)
                {
                    TutorFeedback.AverageGradePrediction = "A+";
                }
                else
                {
                    TutorFeedback.AverageGradePrediction = "No Records Found";
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception here, such as logging or displaying an error message
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }


    private void Create()
    {

        try
        {       
            if (TutorFeedback.PreviousHomeWorkDone == true)
            {
                TutorFeedback.PreviousHomeWorkDoneScore = 1;
            }

            if (TutorFeedback.GradePrediction == "A+")
            {
                TutorFeedback.GradePredictionScore = 1;
            }
            else if (TutorFeedback.GradePrediction == "A")
            {
                TutorFeedback.GradePredictionScore = 0.8;
            }
            else if (TutorFeedback.GradePrediction == "B")
            {
                TutorFeedback.GradePredictionScore = 0.6;
            }
            else if (TutorFeedback.GradePrediction == "C")
            {
                TutorFeedback.GradePredictionScore = 0.4;
            }
            else if (TutorFeedback.GradePrediction == "D")
            {
                TutorFeedback.GradePredictionScore = 0.2;
            }
            else if (TutorFeedback.GradePrediction == "E")
            {
                TutorFeedback.GradePredictionScore = 0.1;
            }
            else
            {
                TutorFeedback.GradePredictionScore = 0;
            }

            TutorFeedback.PercentageScore = TutorFeedback.Percentage / 100;

            TutorFeedback.FinalScore = TutorFeedback.PreviousHomeWorkDoneScore + TutorFeedback.TopicUnderstandingLevel + TutorFeedback.MentalSkills + TutorFeedback.GradePredictionScore + TutorFeedback.PercentageScore;

            @if (TutorFeedback.NextHomework == "Not Given")
            {
                TutorFeedback.NextHomeworkFile = null;
            }
            var obj = new TutorFeedback
                {
                    LessonBookingId = Convert.ToInt64(LessonBookingId),
                    PreviousHomeWorkDone=TutorFeedback.PreviousHomeWorkDone,
                    PreviousHomeWorkDoneScore = TutorFeedback.PreviousHomeWorkDoneScore,
                    PreviousHomeWorkDiscussed = TutorFeedback.PreviousHomeWorkDiscussed,
                    TopicCoveredToday = TutorFeedback.TopicCoveredToday,
                    TopicUnderstandingLevel = TutorFeedback.TopicUnderstandingLevel,
                    GradePrediction = TutorFeedback.GradePrediction,
                    GradePredictionScore = TutorFeedback.GradePredictionScore,
                    AverageGradePrediction = TutorFeedback.AverageGradePrediction,
                    MentalSkills = TutorFeedback.MentalSkills,
                    TestName = TutorFeedback.TestName,
                    ObtainedScore = TutorFeedback.ObtainedScore,
                    TotalScore = TutorFeedback.TotalScore,
                    Percentage = TutorFeedback.Percentage,
                    PercentageScore = TutorFeedback.PercentageScore,
                    TestFile = TutorFeedback.TestFile,
                    NextHomeworkFile = TutorFeedback.NextHomeworkFile,
                    Remarks = TutorFeedback.Remarks,
                    Announcement = TutorFeedback.Announcement,
                    IsPending=true,
                    Status="Pending",
                    FinalScore=TutorFeedback.FinalScore
                };

            context.TutorFeedbacks.Add(obj);

            var lesson = context.LessonBookings.Where(x => x.Id == Convert.ToInt64(LessonBookingId)).FirstOrDefault();
            lesson.StudentScore = TutorFeedback.FinalScore;

            context.SaveChanges();

            Load();
            NavigationManager.NavigateTo($"/TutorSchedule/{LessonBooking.CourseBookings.TutorApplicationUsers.Id}");
        }

        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }

    }


    internal async Task HandleInvalidSubmit()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToFirstError");
        }
        catch (Exception ex)
        {
            // Handle exception here
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }


    private string TestFileBase64Pdf { get; set; }
    private string TestFileFileUrl;
    private byte[]? TestFilebufferFile;

    private async Task TestFileChange(InputFileChangeEventArgs e)
    {

        var selectedFiles = e.GetMultipleFiles();

        if (selectedFiles != null && selectedFiles.Count > 0)
        {

            var selectedFile = selectedFiles[0];

            if (selectedFile.ContentType != "application/pdf")
            {
                JSRuntime.InvokeVoidAsync("alert", "File Should Be In Pdf Format");
                throw new InvalidOperationException("The selected file is not a PDF.");
            }

            if (selectedFile.Size > 5242880) // 5 MB in bytes
            {
                JSRuntime.InvokeVoidAsync("alert", "File Should Be Not Big In Size");
                throw new InvalidOperationException("The selected file size exceeds the limit of 5 MB.");
            }

            using (var stream = selectedFile.OpenReadStream(maxAllowedSize: 10485760))
            {
                TestFilebufferFile = new byte[selectedFile.Size];
                int bytesRead = 0;
                int offset = 0;

                while ((bytesRead = await stream.ReadAsync(TestFilebufferFile, offset, (int)selectedFile.Size - offset)) > 0)
                {
                    offset += bytesRead;
                }
            }

            var base64Image = Convert.ToBase64String(TestFilebufferFile);


            TestFileFileUrl = $"data:{selectedFile.ContentType};base64,{base64Image}";

            if (TestFilebufferFile != null && TestFilebufferFile.Length > 0)
            {
                TutorFeedback.TestFile = TestFilebufferFile;
            }
        }
    }


    private string NextHomeworkFileBase64Pdf { get; set; }
    private string NextHomeworkFileUrl;
    private byte[]? NextHomeworkFilebufferFile;

    private async Task NextHomeworkFileChange(InputFileChangeEventArgs e)
    {

        var selectedFiles = e.GetMultipleFiles();

        if (selectedFiles != null && selectedFiles.Count > 0)
        {

            var selectedFile = selectedFiles[0];

            if (selectedFile.ContentType != "application/pdf")
            {
                JSRuntime.InvokeVoidAsync("alert", "File Should Be In Pdf Format");
                throw new InvalidOperationException("The selected file is not a PDF.");
            }

            if (selectedFile.Size > 5242880) // 5 MB in bytes
            {
                JSRuntime.InvokeVoidAsync("alert", "File Should Be Not Big In Size");
                throw new InvalidOperationException("The selected file size exceeds the limit of 5 MB.");
            }

            using (var stream = selectedFile.OpenReadStream(maxAllowedSize: 10485760))
            {
                NextHomeworkFilebufferFile = new byte[selectedFile.Size];
                int bytesRead = 0;
                int offset = 0;

                while ((bytesRead = await stream.ReadAsync(NextHomeworkFilebufferFile, offset, (int)selectedFile.Size - offset)) > 0)
                {
                    offset += bytesRead;
                }
            }

            var base64Image = Convert.ToBase64String(NextHomeworkFilebufferFile);


            NextHomeworkFileUrl = $"data:{selectedFile.ContentType};base64,{base64Image}";

            if (NextHomeworkFilebufferFile != null && NextHomeworkFilebufferFile.Length > 0)
            {
                TutorFeedback.NextHomeworkFile = NextHomeworkFilebufferFile;
            }
        }
    }
}

