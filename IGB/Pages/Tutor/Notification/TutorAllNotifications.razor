@page "/TutorAllNotifications/{TutorId?}"

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ApplicationDbContext context
@inject UserService UserService
@inject TimeConversionService TimeConversionService

@attribute [Authorize(Roles = "Tutor")]


<h3>All Notifications</h3>

<div class="row">
    <div class="col-md-12" style="text-align: end">
        <RadzenTextBox Placeholder="Search..." @bind-Value="@searchTerm" Change="@(args => FilterChanged())" />
    </div>
</div>

<RadzenDataGrid Data="@AllNotification" Count="@count" TItem="AllNotification" LoadData="@LoadData"
                ShowPagingSummary="true"
                AllowSorting="true"
                AllowPaging="true" PageSize="10"
                PageSizeOptions="new int[] { 10 , 25, 50 }"
                AllowFiltering="true" FilterMode="FilterMode.Simple" FilterDelay="2000"
                AllowColumnResize="true"
                AllowColumnPicking="true"
                ColumnWidth="150px">

    <Columns>

            <RadzenDataGridColumn TItem="AllNotification" Title="Serial No.">
            <Template Context="item">
                @((AllNotification.IndexOf(item) + 1) + ((currentPage - 1) * pageSize))
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AllNotification" Property="Notification" Title="Notification" Sortable="true" />

        <RadzenDataGridColumn TItem="AllNotification" Property="Time" Title="Time" Sortable="true" >
          <Template Context="data">
                    @{
                        @if (data.Time != null)
                        {
                            DateTime Time = TimeConversionService.ConvertFromUtc(data.Time.Value, ApplicationUser.TimeZone);
                            <Span>@Time</Span>
                        }
                    }
                </Template>
            </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AllNotification" Property="IsReadByTutor" Title="Is Read" Sortable="true">
            <Template Context="data">
                @if (data.IsReadByTutor == true)
                {
                    <Span>Read</Span>
                }
                else
                {
                    <Span>UnRead</Span>
                }
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AllNotification" Title="Action">
            <Template Context="data">
                @if (data.CourseBookingId != null)
                {
                    if (data.IsReadByTutor != true)
                    {
                        <RadzenButton Text="Approve" Class="btn btn-primary" Click="@(args => CourseApprove(data.CourseBookingId,data.Id))" />
                        <RadzenButton Text="Reject" Class="btn btn-primary" Click="@(args => CourseReject(data.CourseBookingId,data.Id))" />
                    }
                }
                else if (data.LessonBookingId != null)
                {
                    if (data.IsReadByTutor != true)
                    {
                        <RadzenButton Text="Approve" Class="btn btn-primary" Click="@(args => LessonApprove(data.LessonBookingId,data.Id))" />
                        <RadzenButton Text="Reject" Class="btn btn-primary" Click="@(args => LessonReject(data.LessonBookingId,data.Id))" />
                    }
                }
                else
                {
                    if (data.IsReadByTutor != true)
                    {
                        <RadzenButton Text="Masrk Ad Read" Class="btn btn-primary" Click="@(args => Read(data.Id))" />
                    }
                }

                <RadzenButton Text="Delete" Class="btn btn-primary" Click="@(args => Delete(data))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>



@code {
       [Parameter]
    public string? TutorId { get; set; }

    private List<AllNotification>? AllNotification = new List<AllNotification>();

    int count;
    string searchTerm = "";

            int currentPage = 1;
    int pageSize = 10;

    private string? UserId;
    private string? UserRole;

    private ApplicationUser? ApplicationUser = new ApplicationUser();

    protected override async Task OnInitializedAsync()
    {

        UserId = UserService.LoggedInUserId;
        UserRole = UserService.LoggedInUserRole;
        ApplicationUser = context.ApplicationUsers.Where(x => x.Id == UserId).FirstOrDefault();
        AllNotification = new List<AllNotification>();
        Load();
    }

    private void Load()
    {

        count = context.AllNotifications.Where(x => x.ForTutor == true && x.ForTutorId == UserId).Count();

        AllNotification = context.AllNotifications
        .Include(x => x.NewApplicationUsers)
        .Include(x => x.TutorApplicationUsers)
        .Include(x => x.StudentApplicationUsers)
        .Include(x => x.CourseBookings).ThenInclude(x => x.Courses)
        .Include(x => x.CourseBookingIdForLessons).ThenInclude(x => x.Courses)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.Courses)
        .Include(x => x.LessonBookingStarts).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.Courses)
        .OrderByDescending(n => n.Id)
        .Where(x => x.ForTutor == true && x.ForTutorId==UserId)
        .Skip(0).Take(10).ToList();
    }

    void LoadData(LoadDataArgs args)
    {
        var query = context.AllNotifications
        .Include(x => x.NewApplicationUsers)
        .Include(x => x.TutorApplicationUsers)
        .Include(x => x.StudentApplicationUsers)
        .Include(x => x.CourseBookings).ThenInclude(x => x.Courses)
        .Include(x => x.CourseBookingIdForLessons).ThenInclude(x => x.Courses)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.Courses)
        .Include(x => x.LessonBookingStarts).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.Courses)
           .OrderByDescending(n => n.Id)
           .Where(x => x.ForTutor == true && x.ForTutorId == UserId)
           .AsQueryable();

        if (!string.IsNullOrEmpty(searchTerm))
        {

            query = query.Where(p => p.Notification.Contains(searchTerm));
        }

        if (!string.IsNullOrEmpty(args.Filter))
        {

            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        count = query.Count();

        int skip = args.Skip ?? 0;
        int top = args.Top ?? 10;

                  currentPage = (skip / top) + 1;
        pageSize = top;

        AllNotification = query.Skip(skip).Take(top).ToList();
    }


    void FilterChanged()
    {
        LoadData(new LoadDataArgs());
    }

 


    private void CourseApprove(long? courseid, long Notificationid)
    {
        NavigationManager.NavigateTo($"/TutorCourseApprove/{courseid}/{Notificationid}");
    }
    private void CourseReject(long? courseid, long Notificationid)
    {
        NavigationManager.NavigateTo($"/TutorCourseReject/{courseid}/{Notificationid}");
    }
    private void LessonApprove(long? lessonid, long Notificationid)
    {
        NavigationManager.NavigateTo($"/TutorLessonApprove/{lessonid}/{Notificationid}");
    }
    private void LessonReject(long? lessonid, long Notificationid)
    {
        NavigationManager.NavigateTo($"/TutorLessonReject/{lessonid}/{Notificationid}");
    }


    private void Read(long notificationid)
    {
        try
        {
            var data = context.AllNotifications.Where(x => x.Id == notificationid).FirstOrDefault();
            data.IsReadByTutor = true;
            context.SaveChanges();
            Load();
        }
        catch (Exception ex)
        {

        }

    }
    private void Delete(AllNotification notification)
    {
        try
        {
            context.AllNotifications.Remove(notification);
            context.SaveChanges();
            Load();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting main section: {ex.Message}");
        }
    }

}

