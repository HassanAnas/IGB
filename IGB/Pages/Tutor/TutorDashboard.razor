@page "/TutorDashboard/{TutorId?}"

@inject UserService UserService
@inject NavigationManager NavigationManager
@inject ApplicationDbContext context
@inject IModalService ModalService
@inject ApplicationDbContext context
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Tutor")]


@if(ApplicationUser.IsActive==true)
{
<h3>Tutor Dashboard</h3>

<div class="container">
    <div class="row">
        <div class="col-3" style="background-color: #f8f9fa; padding: 10px; border: 1px solid #dee2e6; border-radius: 5px;">
            <div>EnrolledCourses</div>
            <div>@EnrolledCourses</div>
        </div>
        <div class="col-3" style="background-color: #f8f9fa; padding: 10px; border: 1px solid #dee2e6; border-radius: 5px;">
            <div>CompletedCourses</div>
            <div>@CompletedCourses</div>
        </div>
        <div class="col-3" style="background-color: #f8f9fa; padding: 10px; border: 1px solid #dee2e6; border-radius: 5px;">
            <div>CancelledLessons</div>
            <div>@CancelledLessons</div>
        </div>
        <div class="col-3" style="background-color: #f8f9fa; padding: 10px; border: 1px solid #dee2e6; border-radius: 5px;">
            <div>TakenLessons</div>
            <div>@TakenLessons</div>
        </div>
    </div>
</div>

<h3>Progress Tracker</h3>

<div class="container">
    <div class="row">


        <div class="row">
            <div class="col-md-12" style="text-align: end">
                <button class="btn btn-secondary" @onclick="AllProgress">All</button>
            </div>
        </div>

        @if (CourseBooking != null && CourseBooking.Any())
        {
            @foreach (var item in CourseBooking)
            {
                <div class="col-sm-6">
                    <RadzenCard class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem">
                        <RadzenCheckBox @bind-Value="@item.Smooth" Name="smooth"></RadzenCheckBox>
                        <RadzenLabel Text="Smooth" Component="smooth" Style="margin-right: 1rem;" />
                        <RadzenCheckBox @bind-Value="@item.Detail" Name="dataLabels"></RadzenCheckBox>
                        <RadzenLabel Text="Show Data Labels" Component="dataLabels" Style="margin-right: 1rem;" />
                        <RadzenCheckBox @bind-Value="@item.Marker" Name="markers"></RadzenCheckBox>
                        <RadzenLabel Text="Show Markers" Component="markers" />
                    </RadzenCard>


                    <RadzenChart>

                        <RadzenLineSeries Smooth="@item.Smooth" Data="@item.LessonBookings" CategoryProperty="LessonName" Title="@item.Courses.Name" LineType="LineType.Solid" ValueProperty="StudentScore">
                            <RadzenMarkers Visible="@item.Marker" MarkerType="MarkerType.Circle" />
                            <RadzenSeriesDataLabels Visible="@item.Detail" />
                        </RadzenLineSeries>

                        <RadzenValueAxis Min="0" Max="4">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="GPA" />
                        </RadzenValueAxis>

                        <RadzenCategoryAxis>
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Lessons" />
                        </RadzenCategoryAxis>

                    </RadzenChart>
                </div>

            }
        }

    </div>
</div>

<h3>Student Feedbacks</h3>

<div class="row">
    <div class="col-md-12" style="text-align: end">
        <RadzenTextBox Placeholder="Search..." @bind-Value="@StudentFeedbacksearchTerm" Change="@(args => StudentFeedbackFilterChanged())" />
    </div>
</div>

<RadzenDataGrid Data="@StudentFeedback" Count="@StudentFeedbackcount" TItem="StudentFeedback" LoadData="@StudentFeedbackLoadData"
                ShowPagingSummary="true"
                AllowSorting="true"
                AllowPaging="true" PageSize="10"
                PageSizeOptions="new int[] { 10 , 25, 50 }"
                AllowFiltering="true" FilterMode="FilterMode.Simple" FilterDelay="2000"
                AllowColumnResize="true"
                AllowColumnPicking="true"
                ColumnWidth="150px">

    <Columns>

        <RadzenDataGridColumn TItem="StudentFeedback" Title="#">
            <Template Context="item">
                @((StudentFeedback.IndexOf(item) + 1) + ((StudentFeedbackcurrentPage - 1) * StudentFeedbackpageSize))
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="StudentFeedback" Property="LessonBookings.StartTime" Title="Date" Sortable="true" />

        <RadzenDataGridColumn TItem="StudentFeedback" Property="LessonBookings.CourseBookings.StudentApplicationUsers.FirstName" Title="Student" Sortable="true" />

        <RadzenDataGridColumn TItem="StudentFeedback" Property="LessonBookings.CourseBookings.TutorApplicationUsers.FirstName" Title="Tutor" Sortable="true" />

        <RadzenDataGridColumn TItem="StudentFeedback" Property="LessonBookings.CourseBookings.Courses.Name" Title="Course" Sortable="true" />

        <RadzenDataGridColumn TItem="StudentFeedback" Property="LessonBookings.LessonName" Title="Lesson" Sortable="true" />

        <RadzenDataGridColumn TItem="StudentFeedback" Property="UnderstandingAndEngagement" Title="Understanding And Engagement" Sortable="true" />

        <RadzenDataGridColumn TItem="StudentFeedback" Property="DidTutorExplainTopic" Title="Did Tutor Explain Topic" Sortable="true" />

        <RadzenDataGridColumn TItem="StudentFeedback" Property="DidTutorClearDoubtToday" Title="Did Tutor Clear DoubtToday" Sortable="true" />

        <RadzenDataGridColumn TItem="StudentFeedback" Property="DidTutorClearDoubtPrevious" Title="Did Tutor Clear Doubt Previous" Sortable="true" />

        <RadzenDataGridColumn TItem="StudentFeedback" Property="RateTutorTeaching" Title="Tutor Teaching" Sortable="true" />

        <RadzenDataGridColumn TItem="StudentFeedback" Title="Action">
            <Template Context="data">

            </Template>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>

<h3>Tutor Feedbacks</h3>


<div class="row">
    <div class="col-md-12" style="text-align: end">
        <RadzenTextBox Placeholder="Search..." @bind-Value="@TutorFeedbacksearchTerm" Change="@(args => TutorFeedbackFilterChanged())" />
    </div>
</div>

<RadzenDataGrid Data="@TutorFeedback" Count="@TutorFeedbackcount" TItem="TutorFeedback" LoadData="@TutorFeedbackLoadData"
                ShowPagingSummary="true"
                AllowSorting="true"
                AllowPaging="true" PageSize="10"
                PageSizeOptions="new int[] { 10 , 25, 50 }"
                AllowFiltering="true" FilterMode="FilterMode.Simple" FilterDelay="2000"
                AllowColumnResize="true"
                AllowColumnPicking="true"
                ColumnWidth="150px">

    <Columns>

        <RadzenDataGridColumn TItem="TutorFeedback" Title="#">
            <Template Context="item">
                @((TutorFeedback.IndexOf(item) + 1) + ((TutorFeedbackcurrentPage - 1) * TutorFeedbackpageSize))
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="TutorFeedback" Property="LessonBookings.StartTime" Title="Date" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="LessonBookings.CourseBookings.StudentApplicationUsers.FirstName" Title="Student" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="LessonBookings.CourseBookings.TutorApplicationUsers.FirstName" Title="Tutor" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="LessonBookings.CourseBookings.Courses.Name" Title="Course" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="LessonBookings.LessonName" Title="Lesson" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="GradePrediction" Title="Grade Prediction" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="AverageGradePrediction" Title="Average Grade Prediction" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="MentalSkills" Title="Mental Skills" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="TopicUnderstandingLevel" Title="Topic Understanding Level" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="PreviousHomeWorkDone" Title="Previous HomeWork Done" Sortable="true">
            <Template Context="data">
                @if (data.PreviousHomeWorkDone == true)
                {
                    <Span>Done</Span>
                }
                else
                {
                    <Span>Not Done</Span>
                }
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="TutorFeedback" Property="NextHomework" Title="Next Homework" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="TestFile" Title="Test Report" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="Announcement" Title="Announcement" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="Remarks" Title="Remarks" Sortable="true" />


        <RadzenDataGridColumn TItem="TutorFeedback" Title="Action">
            <Template Context="data">

            </Template>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>

<h3>Announcements</h3>


<div class="row">
    <div class="col-md-12" style="text-align: end">
        <RadzenTextBox Placeholder="Search..." @bind-Value="@AnnouncementsearchTerm" Change="@(args => AnnouncementFilterChanged())" />
    </div>
</div>

<RadzenDataGrid Data="@Announcement" Count="@Announcementcount" TItem="TutorFeedback" LoadData="@AnnouncementLoadData"
                ShowPagingSummary="true"
                AllowSorting="true"
                AllowPaging="true" PageSize="10"
                PageSizeOptions="new int[] { 10 , 25, 50 }"
                AllowFiltering="true" FilterMode="FilterMode.Simple" FilterDelay="2000"
                AllowColumnResize="true"
                AllowColumnPicking="true"
                ColumnWidth="150px">

    <Columns>

        <RadzenDataGridColumn TItem="TutorFeedback" Title="#">
            <Template Context="item">
                @((Announcement.IndexOf(item) + 1) + ((AnnouncementcurrentPage - 1) * AnnouncementpageSize))
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="TutorFeedback" Property="LessonBookings.StartTime" Title="Date" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="LessonBookings.CourseBookings.StudentApplicationUsers.FirstName" Title="Student" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="LessonBookings.CourseBookings.TutorApplicationUsers.FirstName" Title="Tutor" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="LessonBookings.CourseBookings.Courses.Name" Title="Course" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="LessonBookings.LessonName" Title="Lesson" Sortable="true" />

        <RadzenDataGridColumn TItem="TutorFeedback" Property="Announcement" Title="Announcement" Sortable="true" />

    </Columns>

</RadzenDataGrid>
}
else
{

    JSRuntime.InvokeVoidAsync("alert", "Your Account Is Not Active");


}

@code {
    [Parameter]
    public string? TutorId { get; set; }

    private string? UserId;
    private string? UserRole;

    private ApplicationUser? ApplicationUser;

    private List<CourseBooking> CourseBooking = new List<CourseBooking>();

    private List<StudentFeedback> StudentFeedback = new List<StudentFeedback>();

    private List<TutorFeedback> TutorFeedback = new List<TutorFeedback>();

    private List<TutorFeedback> Announcement = new List<TutorFeedback>();

    private int? EnrolledCourses = 0;
    private int? CompletedCourses = 0;
    private int? CancelledLessons = 0;
    private int? TakenLessons = 0;


    int StudentFeedbackcount;
    string StudentFeedbacksearchTerm = "";
    int StudentFeedbackcurrentPage = 1;
    int StudentFeedbackpageSize = 10;

    int TutorFeedbackcount;
    string TutorFeedbacksearchTerm = "";
    int TutorFeedbackcurrentPage = 1;
    int TutorFeedbackpageSize = 10;

    int Announcementcount;
    string AnnouncementsearchTerm = "";
    int AnnouncementcurrentPage = 1;
    int AnnouncementpageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        UserId = UserService.LoggedInUserId;
        UserRole = UserService.LoggedInUserRole;

        ApplicationUser = context.ApplicationUsers.Where(x => x.Id == UserId).FirstOrDefault();


        EnrolledCourses = context.CourseBookings.Where(x => x.TutorId == TutorId).Count();
        CompletedCourses = context.CourseBookings.Where(x => x.TutorId == TutorId && x.IsCompleted == true).Count();
        CancelledLessons = context.LessonBookings.Where(x => x.CourseBookings.TutorId == TutorId && x.IsCancelled == true).Count();
        TakenLessons = context.LessonBookings.Where(x => x.CourseBookings.TutorId== TutorId && x.IsDone == true).Count();

        CourseBooking = context.CourseBookings
            .Include(x => x.StudentApplicationUsers)
    .Include(x => x.TutorApplicationUsers)
    .Include(x => x.AdminApplicationUsers)
    .Include(x => x.Courses)
    .Include(x => x.LessonBookings).ThenInclude(x => x.TutorFeedbacks)
       .OrderByDescending(x => x.CourseBookingDate)
    .Where(x => x.TutorApplicationUsers.Id == TutorId && x.IsBooked == true || x.IsCompleted == true)
    .Skip(0).Take(4)
    .ToList();


        StudentFeedback = context.StudentFeedbacks
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.StudentApplicationUsers)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.TutorApplicationUsers)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.Courses)
        .Where(x => x.LessonBookings.CourseBookings.TutorApplicationUsers.Id == TutorId)
        .Skip(0).Take(10).ToList();

        StudentFeedbackcount = context.StudentFeedbacks.Where(x => x.LessonBookings.CourseBookings.TutorApplicationUsers.Id == TutorId).Count();

        TutorFeedback = context.TutorFeedbacks
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.StudentApplicationUsers)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.TutorApplicationUsers)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.Courses)
        .Where(x => x.LessonBookings.CourseBookings.TutorApplicationUsers.Id == TutorId)
        .Skip(0).Take(10).ToList();

        TutorFeedbackcount = context.TutorFeedbacks.Where(x => x.LessonBookings.CourseBookings.TutorApplicationUsers.Id == TutorId).Count();

        Announcement = context.TutorFeedbacks
       .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.StudentApplicationUsers)
       .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.TutorApplicationUsers)
       .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.Courses)
       .Where(x => x.LessonBookings.CourseBookings.TutorApplicationUsers.Id == TutorId)
       .Skip(0).Take(10).ToList();


        Announcementcount = context.TutorFeedbacks.Where(x => x.LessonBookings.CourseBookings.TutorApplicationUsers.Id == TutorId).Count();
    }
 

    //--------------

    void StudentFeedbackLoadData(LoadDataArgs args)
    {
        var query = context.StudentFeedbacks
              .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.StudentApplicationUsers)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.TutorApplicationUsers)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.Courses)
        .Where(x => x.LessonBookings.CourseBookings.TutorApplicationUsers.Id == TutorId)
        .AsQueryable();

        if (!string.IsNullOrEmpty(StudentFeedbacksearchTerm))
        {

            // query = query.Where(p => p.Name.Contains(StudentFeedbacksearchTerm));
        }

        if (!string.IsNullOrEmpty(args.Filter))
        {

            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        StudentFeedbackcount = query.Count();

        int skip = args.Skip ?? 0;
        int top = args.Top ?? 10;
        StudentFeedbackcurrentPage = (skip / top) + 1;
        StudentFeedbackpageSize = top;

        StudentFeedback = query.Skip(skip).Take(top).ToList();
    }


    void StudentFeedbackFilterChanged()
    {
        StudentFeedbackLoadData(new LoadDataArgs());
    }

    //----------------

    void TutorFeedbackLoadData(LoadDataArgs args)
    {
        var query = context.TutorFeedbacks
              .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.StudentApplicationUsers)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.TutorApplicationUsers)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.Courses)
        .Where(x => x.LessonBookings.CourseBookings.TutorApplicationUsers.Id == TutorId)
        .AsQueryable();

        if (!string.IsNullOrEmpty(TutorFeedbacksearchTerm))
        {

            // query = query.Where(p => p.Name.Contains(StudentFeedbacksearchTerm));
        }

        if (!string.IsNullOrEmpty(args.Filter))
        {

            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        TutorFeedbackcount = query.Count();

        int skip = args.Skip ?? 0;
        int top = args.Top ?? 10;
        TutorFeedbackcurrentPage = (skip / top) + 1;
        TutorFeedbackpageSize = top;

        TutorFeedback = query.Skip(skip).Take(top).ToList();
    }


    void TutorFeedbackFilterChanged()
    {
        TutorFeedbackLoadData(new LoadDataArgs());
    }

    //------------
    void AnnouncementLoadData(LoadDataArgs args)
    {
        var query = context.TutorFeedbacks
              .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.StudentApplicationUsers)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.TutorApplicationUsers)
        .Include(x => x.LessonBookings).ThenInclude(x => x.CourseBookings).ThenInclude(x => x.Courses)
        .Where(x => x.LessonBookings.CourseBookings.TutorApplicationUsers.Id == TutorId)
        .AsQueryable();

        if (!string.IsNullOrEmpty(AnnouncementsearchTerm))
        {

            // query = query.Where(p => p.Name.Contains(StudentFeedbacksearchTerm));
        }

        if (!string.IsNullOrEmpty(args.Filter))
        {

            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        Announcementcount = query.Count();

        int skip = args.Skip ?? 0;
        int top = args.Top ?? 10;
        AnnouncementcurrentPage = (skip / top) + 1;
        AnnouncementpageSize = top;

        Announcement = query.Skip(skip).Take(top).ToList();
    }


    void AnnouncementFilterChanged()
    {
        AnnouncementLoadData(new LoadDataArgs());
    }

    private void AllProgress()
    {
        NavigationManager.NavigateTo($"/TutorProgress/{TutorId}");
    }






    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
            {
                Label = "# of randoms",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone",
            };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double> {
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble() };
    }
}
