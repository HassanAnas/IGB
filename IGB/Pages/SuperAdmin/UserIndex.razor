@page "/UserIndex"

@attribute [Authorize(Roles = "SuperAdmin")]
@inject ApplicationDbContext context
@inject NavigationManager NavigationManager
@inject UserManager<IdentityUser> UserManager

<h3>UserIndex</h3>

<div class="row">
    <div class="col-md-12" style="text-align: end">
        <a href="UserCreate" class="btn btn-custom" style="color: white; background-color: #1a0a2e; text-decoration: none;">Create</a>
    </div>
</div>
<div class="row">
    <div class="col-md-12" style="text-align: end">
        <RadzenTextBox Placeholder="Search..." @bind-Value="@searchTerm" Change="@(args => FilterChanged())" />
    </div>
</div>





<RadzenDataGrid Data="@ApplicationUser" Count="@count" TItem="ApplicationUser" LoadData="@LoadData"
                ShowPagingSummary="true"
                AllowSorting="true"
                AllowPaging="true" PageSize="10"
                PageSizeOptions="new int[] { 10 , 25, 50 }"
                AllowFiltering="true" FilterMode="FilterMode.Simple" FilterDelay="2000"
                AllowColumnResize="true"
                AllowColumnPicking="true"
                ColumnWidth="150px">

    <Columns>

        <RadzenDataGridColumn TItem="ApplicationUser" Title="Serial No.">
            <Template Context="item">
                @((ApplicationUser.IndexOf(item) + 1) + ((currentPage - 1) * pageSize))
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Frozen="true" TItem="ApplicationUser" Property="Email" Title="Email" Sortable="true" />

        <RadzenDataGridColumn TItem="ApplicationUser" Property="FirstName" Title="First Name" Sortable="true" />

        <RadzenDataGridColumn TItem="ApplicationUser" Property="RoleName" Title="Role" Sortable="true" />

        <RadzenDataGridColumn TItem="ApplicationUser" Property="Update" Title="Profile Update" Sortable="true" />   
              
        <RadzenDataGridColumn TItem="ApplicationUser" Title="IsActive" TextAlign="TextAlign.Center" >
            <Template Context="user">
                <RadzenSwitch TValue="bool" class="form-check-input" @bind-Value="user.IsActive" Change="@(args => IsActive(args, user))" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ApplicationUser" Title="Action">
            <Template Context="item">
                <RadzenButton Text="Edit" Class="btn btn-primary" Click="@(args => GoToUserUpdate(item))" />
                <RadzenButton Text="Delete" Class="btn btn-primary" Click="@(args => Delete(item))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>


@code {
    int count;
    string searchTerm = "";

            int currentPage = 1;
    int pageSize = 10;

    private List<ApplicationUser> ApplicationUser = new List<ApplicationUser>();

    protected override void OnInitialized()
    {
        ApplicationUser = context.ApplicationUsers.Where(x => x.IsSuperAdmin == false && x.IsDeleted == false).ToList();
        count = ApplicationUser.Count();
    }
    private void Load()
    {
        ApplicationUser = context.ApplicationUsers.Where(x => x.IsSuperAdmin == false && x.IsDeleted == false).ToList();
        count = ApplicationUser.Count();
    }

    private void GoToUserUpdate(ApplicationUser? user)
    {
        var RoleId = context.ApplicationUserRoles.Where(x => x.UserId == user.Id).Select(x => x.RoleId).FirstOrDefault();
        var Role = context.ApplicationRoles.Where(x => x.Id == RoleId).Select(x => x.Name).FirstOrDefault();

        if (Role == "Admin")
        {
            NavigationManager.NavigateTo($"/AdminProfile/{user.Id}");
        }
        if (Role == "Tutor")
        {
            NavigationManager.NavigateTo($"/TutorProfile/{user.Id}");
        }
        if (Role == "Student")
        {
            NavigationManager.NavigateTo($"/StudentProfile/{user.Id}");
        }
        if (Role == "Guardian")
        {
            NavigationManager.NavigateTo($"/StudentProfile/{user.StudentId}");
        }

    }

    private void Delete(ApplicationUser user)
    {
        try
        {
            var record = context.ApplicationUsers.Where(x => x.Id == user.Id).FirstOrDefault();
            record.IsDeleted = true;
            record.IsActive = false;
            record.EmailConfirmed = false;
            context.SaveChanges();
            Load();
        }
        catch (Exception)
        {

            throw;
        }

    }



    void LoadData(LoadDataArgs args)
    {

        var query = context.ApplicationUsers.Where(x => x.IsSuperAdmin == false && x.IsDeleted == false).AsQueryable();

        if (!string.IsNullOrEmpty(searchTerm))
        {

            query = query.Where(p => p.UserName.Contains(searchTerm));
        }


        if (!string.IsNullOrEmpty(args.Filter))
        {

            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        count = query.Count();

        int skip = args.Skip ?? 0;
        int top = args.Top ?? 10;

                currentPage = (skip / top) + 1;
        pageSize = top;

        ApplicationUser = query.Skip(skip).Take(top).ToList();
    }


    void FilterChanged()
    {
        LoadData(new LoadDataArgs());
    }



    private void IsActive(bool newValue, ApplicationUser user)
    {
        if (newValue == true)
        {
            user.EmailConfirmed = true;
        }
        user.IsActive = newValue;
        context.ApplicationUsers.Update(user);
        context.SaveChanges();
        Load();
    }

}
