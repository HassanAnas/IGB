@page "/LessonBookingCreate/{CourseBookingId?}"

@inject NavigationManager NavigationManager
@inject ApplicationDbContext context
@inject UserService UserService
@inject IJSRuntime JSRuntime
@inject UserManager<IdentityUser> UserManager
@inject IModalService ModalService
@inject TimeConversionService TimeConversionService
@attribute [Authorize(Roles = "Student,Admin,Tutor")]

@if (CourseBookingId != null)
{
    <h3>Lesson Booking Create</h3>



    <EditForm Model="@LessonBooking" OnValidSubmit="LessonCreate" OnInvalidSubmit="HandleInvalidSubmit">
        <FluentValidationValidator />

        @if (CourseBooking != null)
        {
            @if (CourseBooking.StudentApplicationUsers != null)
            {
                <label>Student Name:</label>
                <InputText @bind-Value="CourseBooking.StudentApplicationUsers.FirstName" class="form-control" disabled />

                <label>Student Tag:</label>
                <InputText @bind-Value="CourseBooking.StudentApplicationUsers.Tag" class="form-control" disabled />
            }
            @if (CourseBooking.Courses != null)
            {
                <label>Course Name:</label>
                <InputText @bind-Value="CourseBooking.Courses.Name" class="form-control" disabled />
            }
            @if (CourseBooking.TutorApplicationUsers != null)
            {
                <label>Tutor Name:</label>
                <InputText @bind-Value="CourseBooking.TutorApplicationUsers.FirstName" class="form-control" disabled />
            }

        }

        <div class="form-group">

            <label>How Many Lessons Do You Want:</label>
            <InputNumber @bind-Value="LessonCount" class="form-control" />
            <button type="button" class="btn btn-primary" @onclick="NumberOfLessons">Add Lessons</button>

            <br />
            <br />
            <button type="button" class="btn btn-primary" @onclick="AddLesson">Add A Lesson</button>
            <br />
            @if (CourseBooking.LessonBookings.Count > 0)
            {
                <h3>Current Lesson Booking</h3>
            }

            <table class="table">
                <thead>
                    <tr>

                        <th rowspan="3" style="vertical-align:top;">Lesson Name</th>
                        <th rowspan="3" style="vertical-align:top;">Topic Covered</th>
                        <th>First Time Slot</th>
                        <th>Second Time Slot</th>
                        <th>Third Time Slot</th>
                        <th>Duration</th>
                
                        @if (UserRole == "Student")
                        {
                            <th>Student Remarks</th>
                        }
                        @if (UserRole == "Tutor")
                        {
                            <th>Tutor Remarks</th>
                        }
                        @if (UserRole == "Admin")
                        {
                            <th>Admin Remarks</th>
                        }


                        <th rowspan="3" style="vertical-align:top;">Action</th>


                    </tr>
                    <tr>
                        @*  <td></td> *@
                        @* <td></td> *@
                        <td><input type="checkbox" @bind="FirstTimeSlotCheckbox" /></td>
                        <td><input type="checkbox" @bind="SecondTimeSlotCheckbox" /></td>
                        <td><input type="checkbox" @bind="ThirdTimeSlotCheckbox" /></td>
                        <td><input type="checkbox" @bind="DurationCheckbox" /></td>
                        @* <td></td> *@
                        <td><input type="checkbox" @bind="RemarksCheckbox" /></td>
                        @* <td></td> *@
                    </tr>

                    <tr>
                        @* <td></td> *@
                        @* <td></td> *@
                        <td>
                            <input type="datetime-local" @bind="FirstTimeSlot" class="form-control" @bind:event="oninput" @onchange="FirstSlot" />
                            <RadzenDropDown class="form-control" @bind-Value=@FirstTimeSlotDays Data=@DaysName TextProperty="Name" ValueProperty="Value"
                                            FilterDelay="1" FilterPlaceholder="Search Here . . ." AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple=true AllowClear=false Placeholder="Select Days" Change="DateRefresh" />
                        </td>

                        <td>
                            <input type="datetime-local" @bind="SecondTimeSlot" class="form-control" @bind:event="oninput" @onchange="SecondSlot" />
                            <RadzenDropDown class="form-control" @bind-Value=@SecondTimeSlotDays Data=@DaysName TextProperty="Name" ValueProperty="Value"
                                            FilterDelay="1" FilterPlaceholder="Search Here . . ." AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple=true AllowClear=false Placeholder="Select Days" Change="DateRefresh" />
                        </td>
                        <td>
                            <input type="datetime-local" @bind="ThirdTimeSlot" class="form-control" @bind:event="oninput" @onchange="ThirdSlot" />
                            <RadzenDropDown class="form-control" @bind-Value=@ThirdTimeSlotDays Data=@DaysName TextProperty="Name" ValueProperty="Value"
                                            FilterDelay="1" FilterPlaceholder="Search Here . . ." AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple=true AllowClear=false Placeholder="Select Days" Change="DateRefresh" />
                        </td>
                        <td> <InputNumber @bind-Value="Duration" class="form-control" Placeholder="In Minutes" /></td>
                        @* <td></td> *@
                        <td> <InputText @bind-Value="Remarks" class="form-control" /></td>
                        @* <td></td> *@
                    </tr>

                </thead>

                <tbody>

                    @foreach (var item in LessonBooking)
                    {

                        @if (DurationCheckbox == true)
                        {
                            item.Duration = Duration;
                        }
                        else
                        {
                            Duration = 0;
                        }
                        @if (RemarksCheckbox == true)
                        {
                            @if (UserRole == "Student")
                            {
                                item.StudentRemarks = Remarks;
                            }
                            @if (UserRole == "Tutor")
                            {
                                item.TutorRemarks = Remarks;
                            }
                            @if (UserRole == "Admin")
                            {
                                item.AdminRemarks = Remarks;
                            }
                        }
                        else
                        {
                            Remarks = "";
                        }

                        @if (FirstTimeSlotCheckbox == true && LessonBooking.Count > 0 && FirstTimeSlotDays.Count > 0 && FirstTimeSlot != null && FirstTimeSlotDays != null && FirstTimeSlotDateTime != null)
                        {

                            bool done = false;
                            while (done == false)
                            {
                                string dayName = FirstTimeSlotDateTime.Value.ToString("dddd");
                                if (FirstTimeSlotDays.Contains(dayName))
                                {
                                    item.FirstTimeSlot = FirstTimeSlotDateTime.Value;
                                    done = true;

                                }

                                FirstTimeSlotDateTime = FirstTimeSlotDateTime.Value.AddDays(1);
                            }

                        }

                        @if (SecondTimeSlotCheckbox == true && LessonBooking.Count > 0 && SecondTimeSlotDays.Count > 0 && SecondTimeSlot != null && SecondTimeSlotDays != null && SecondTimeSlotDateTime != null)
                        {


                            bool done = false;
                            while (done == false)
                            {
                                string dayName = SecondTimeSlotDateTime.Value.ToString("dddd");
                                if (SecondTimeSlotDays.Contains(dayName))
                                {
                                    item.SecondTimeSlot = SecondTimeSlotDateTime;
                                    done = true;

                                }

                                SecondTimeSlotDateTime = SecondTimeSlotDateTime.Value.AddDays(1);
                            }

                        }

                        @if (ThirdTimeSlotCheckbox == true && LessonBooking.Count > 0 && ThirdTimeSlotDays.Count > 0 && ThirdTimeSlot != null && ThirdTimeSlotDays != null && ThirdTimeSlotDateTime != null)
                        {


                            bool done = false;
                            while (done == false)
                            {
                                string dayName = ThirdTimeSlotDateTime.Value.ToString("dddd");
                                if (ThirdTimeSlotDays.Contains(dayName))
                                {
                                    item.ThirdTimeSlot = ThirdTimeSlotDateTime;
                                    done = true;

                                }

                                ThirdTimeSlotDateTime = ThirdTimeSlotDateTime.Value.AddDays(1);
                            }

                        }
                        <tr>

                            <td>
                                <InputText @bind-Value="item.LessonName" class="form-control" />
                                @if (item.LessonName == null)
                                {
                                    <Span style="color: red;">Lesson Name Is Required</Span>
                                }
                            </td>

                            <td> <InputText @bind-Value="item.TopicCovered" class="form-control" /></td>

                            <td>
                                <input type="datetime-local" @bind="item.FirstTimeSlot" class="form-control" />
                                @if (item.FirstTimeSlot == null)
                                {
                                    <Span style="color: red;">First Time Slot Is Required</Span>
                                }

                                @if (item.FirstTimeSlot == item.SecondTimeSlot || item.ThirdTimeSlot == item.FirstTimeSlot)
                                {
                                    <Span style="color: red;">First Time Slot Should Be Different</Span>
                                }
                                @if (item.FirstTimeSlot < DateTime.Now)
                                {
                                    <Span style="color: red;">First Time Slot Should Be Greater Than Current Date</Span>
                                }

                            </td>

                            <td>
                                <input type="datetime-local" @bind="item.SecondTimeSlot" class="form-control" />
                                @if (item.SecondTimeSlot == null)
                                {
                                    <Span style="color: red;">Second Time Slot Is Required</Span>
                                }

                                @if (item.FirstTimeSlot == item.SecondTimeSlot || item.ThirdTimeSlot == item.SecondTimeSlot)
                                {
                                    <Span style="color: red;">Second Time Slot Should Be Different</Span>
                                }
                                @if (item.SecondTimeSlot < DateTime.Now)
                                {
                                    <Span style="color: red;">Second Time Slot Should Be Greater Than Current Date</Span>
                                }
                            </td>

                            <td>
                                <input type="datetime-local" @bind="item.ThirdTimeSlot" class="form-control" />
                                @if (item.ThirdTimeSlot == null)
                                {
                                    <Span style="color: red;">Third Time Slot Is Required</Span>
                                }

                                @if (item.FirstTimeSlot == item.ThirdTimeSlot || item.ThirdTimeSlot == item.SecondTimeSlot)
                                {
                                    <Span style="color: red;">Third Time Slot Should Be Different</Span>
                                }
                                @if (item.ThirdTimeSlot < DateTime.Now)
                                {
                                    <Span style="color: red;">Third Time Slot Should Be Greater Than Current Date</Span>
                                }
                            </td>

                            <td>
                                <InputNumber @bind-Value="item.Duration" class="form-control" Placeholder="In Minutes" />
                                @if (item.Duration == null)
                                {
                                    <Span style="color: red;">Duration Is Required</Span>
                                }

                            </td>


                            @if (UserRole == "Student")
                            {
                                <td><InputText @bind-Value="item.StudentRemarks" class="form-control" />  </td>
                            }
                            @if (UserRole == "Tutor")
                            {
                                <td><InputText @bind-Value="item.TutorRemarks" class="form-control" />  </td>
                            }
                            @if (UserRole == "Admin")
                            {
                                <td><InputText @bind-Value="item.AdminRemarks" class="form-control" />  </td>
                            }






                            <td><button type="button" class="btn btn-danger" @onclick="() => RemoveCurrentLesson(item)">Remove</button></td>
                        </tr>
                    }
                </tbody>
            </table>



            @if (CourseBooking.LessonBookings.Count > 0)
            {
                <br />
                <h3>Previous Lesson Booking</h3>
                <table class="table">
                    <thead>
                        <tr>

                            <th>Lesson Name</th>
                            <th>Topic Covered</th>
                            <th>First Time Slot</th>
                            <th>Second Time Slot</th>
                            <th>Third Time Slot</th>
                            <th>Duration</th>
                            @* <th>Selected Time</th>
                    <th>Start Time</th>
                    <th>End Time</th> *@
                            <th>Status</th>
                            @if (UserRole == "Student")
                            {
                                <th>Student Remarks</th>
                            }
                            @if (UserRole == "Tutor")
                            {
                                <th>Tutor Remarks</th>
                            }
                            @if (UserRole == "Admin")
                            {
                                <th>Admin Remarks</th>
                            }


                            <th>Action</th>


                        </tr>
                    </thead>


                    <tbody>

                        @foreach (var item in CourseBooking.LessonBookings)
                        {


                            DateTime FirstTimeSlot = TimeConversionService.ConvertFromUtc(item.FirstTimeSlot.Value, ApplicationUser.TimeZone);
                            DateTime SecondTimeSlot = TimeConversionService.ConvertFromUtc(item.SecondTimeSlot.Value, ApplicationUser.TimeZone);
                            DateTime ThirdTimeSlot = TimeConversionService.ConvertFromUtc(item.ThirdTimeSlot.Value, ApplicationUser.TimeZone);


                            <tr>

                                <td>
                                    <InputText @bind-Value="item.LessonName" class="form-control" disabled />

                                </td>

                                <td> <InputText @bind-Value="item.TopicCovered" class="form-control" disabled /></td>

                                <td>
                                    <input type="datetime-local" @bind="FirstTimeSlot" class="form-control" disabled />



                                </td>

                                <td>
                                    <input type="datetime-local" @bind="SecondTimeSlot" class="form-control" disabled />



                                </td>

                                <td>
                                    <input type="datetime-local" @bind="ThirdTimeSlot" class="form-control" disabled />


                                </td>

                                <td>
                                    <InputNumber @bind-Value="item.Duration" class="form-control" Placeholder="In Minutes" disabled />


                                </td>

                                @*   <td><input type="datetime-local" @bind="item.SelectedTime" class="form-control" />  </td>
                    <td><input type="datetime-local" @bind="item.StartTime" class="form-control" />  </td>
                    <td><input type="datetime-local" @bind="item.EndTime" class="form-control" />  </td> *@

                                <td><InputText @bind-Value="item.Status" class="form-control" disabled />  </td>

                                @if (UserRole == "Student")
                                {
                                    <td><InputText @bind-Value="item.StudentRemarks" class="form-control" disabled />  </td>
                                }
                                @if (UserRole == "Tutor")
                                {
                                    <td><InputText @bind-Value="item.TutorRemarks" class="form-control" disabled />  </td>
                                }
                                @if (UserRole == "Admin")
                                {
                                    <td><InputText @bind-Value="item.AdminRemarks" class="form-control" disabled />  </td>
                                }






                                <td><button type="button" class="btn btn-danger" @onclick="() => RemovePreviousLesson(item)">Remove</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>

}



@code {

    [Parameter]
    public string? CourseBookingId { get; set; }


    private string? UserId;
    private string? UserRole;

    private List<DaysName>? DaysName { get; set; } = new List<DaysName>();

    private List<string>? FirstTimeSlotDays { get; set; } = new List<string>();

    private List<string>? SecondTimeSlotDays { get; set; } = new List<string>();

    private List<string>? ThirdTimeSlotDays { get; set; } = new List<string>();


    private DateTime? FirstDate;
    private DateTime? SecondDate;
    private DateTime? ThirdDate;

    private int? LessonCount;

    private DateTime? FirstTimeSlotDateTime;
    private DateTime? SecondTimeSlotDateTime;
    private DateTime? ThirdTimeSlotDateTime;

    private CourseBooking? CourseBooking = new CourseBooking();
    private ApplicationUser? ApplicationUser = new ApplicationUser();
    private List<LessonBooking>? LessonBooking = new List<LessonBooking>();

    private bool DurationCheckbox = false;
    private int? Duration;

    private bool RemarksCheckbox = false;
    private string? Remarks;

    private bool FirstTimeSlotCheckbox = false;
    private DateTime? FirstTimeSlot = DateTime.Now;

    private bool SecondTimeSlotCheckbox = false;
    private DateTime? SecondTimeSlot = DateTime.Now;

    private bool ThirdTimeSlotCheckbox = false;
    private DateTime? ThirdTimeSlot = DateTime.Now;

    private bool TimeConflictCheckbox = false;
    private string? TimeConflictWarning;







    protected override async Task OnInitializedAsync()
    {
        try
        {

        UserId = UserService.LoggedInUserId;
        UserRole = UserService.LoggedInUserRole;

        DaysName = new List<DaysName>()
            {
                new DaysName { Name = "Monday" , Value = "Monday"},
                new DaysName { Name = "Tuesday", Value = "Tuesday" },
                new DaysName { Name = "Wednesday", Value = "Wednesday" },
                new DaysName { Name = "Thursday", Value = "Thursday" },
                new DaysName { Name = "Friday" , Value = "Friday"},
                new DaysName { Name = "Saturday", Value = "Saturday" },
                new DaysName { Name = "Sunday", Value = "Sunday" }
            };
       
            if (CourseBookingId != null)
            {

                CourseBooking = context.CourseBookings
                .Include(x => x.StudentApplicationUsers)
                .Include(x => x.TutorApplicationUsers)
                .Include(x => x.AdminApplicationUsers)
                .Include(x => x.Courses)
                .Include(x => x.LessonBookings)
                .Where(x => x.Id == Convert.ToInt64(CourseBookingId)).FirstOrDefault();

                ApplicationUser = context.ApplicationUsers.Find(UserId);
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }

    }
    private void NumberOfLessons()
    {
        try
        {
    LessonBooking = new List<LessonBooking>();
        for (int i = 0; i < LessonCount; i++)
        {
            LessonBooking.Add(new LessonBooking());
        }
        }
        catch (Exception)
        {
            
            throw;
        }    
    }
    private void AddLesson()
    {
        try
        {
            LessonBooking.Add(new LessonBooking());

            FirstTimeSlotDateTime = FirstDate;
            SecondTimeSlotDateTime = SecondDate;
            ThirdTimeSlotDateTime = ThirdDate;
        }
        catch (Exception)
        {
            
            throw;
        }
    }
    private void RemoveCurrentLesson(LessonBooking record)
    {
        try
        {
            LessonBooking.Remove(record);
            FirstTimeSlotDateTime = FirstDate;
            SecondTimeSlotDateTime = SecondDate;
            ThirdTimeSlotDateTime = ThirdDate;
        }
        catch (Exception)
        {

            throw;
        }
    }
    private void RemovePreviousLesson(LessonBooking record)
    {
        try
        {
        var lesson = context.LessonBookings.Where(x=>x.Id==record.Id).Include(x=>x.CourseBookings).FirstOrDefault();

            if (record.IsBooked != true && record.IsDone != true)
        {
                var notify = context.AllNotifications.Where(x => x.LessonBookingId == record.Id || x.CourseBookingIdForLesson == record.CourseBookingId).ToList();
            context.AllNotifications.RemoveRange(notify);
            context.SaveChanges();
            context.LessonBookings.Remove(record);
            context.SaveChanges();
        }
        else
        {
            JSRuntime.InvokeVoidAsync("alert", "Lesson Is Booked , You Cann't Delete it.");
        }
               }
        catch (Exception)
        {
            
            throw;
        }
    }


    private void LessonCreate()
    {
        try
        {
        bool allvalid = true;
        foreach (var item in LessonBooking)
        {
            var validator = new LessonBooking.LessonBookingValidator();
            var validationResult = validator.Validate(item);
            if (!validationResult.IsValid)
            {
                allvalid = false;
                break;
            }

        }

        if (allvalid)
        {

            try
            {



                foreach (var item in LessonBooking)
                {
                    DateTime FirstTimeSlot = TimeConversionService.ConvertToUtc(item.FirstTimeSlot.Value, ApplicationUser.TimeZone);
                    DateTime SecondTimeSlot = TimeConversionService.ConvertToUtc(item.SecondTimeSlot.Value, ApplicationUser.TimeZone);
                    DateTime ThirdTimeSlot = TimeConversionService.ConvertToUtc(item.ThirdTimeSlot.Value, ApplicationUser.TimeZone);

                    var obj = new LessonBooking
                        {
                            CourseBookingId = Convert.ToInt64(CourseBookingId),
                            LessonBookingInitiatedBy = UserRole,
                            LessonName = item.LessonName,
                            TopicCovered = item.TopicCovered,
                            FirstTimeSlot = FirstTimeSlot,
                            SecondTimeSlot = SecondTimeSlot,
                            ThirdTimeSlot = ThirdTimeSlot,
                            Duration = item.Duration,
                            IsSubmited = true,
                            Status = "Pending",
                            StudentRemarks = item.StudentRemarks,
                            TutorRemarks = item.TutorRemarks,
                            AdminRemarks = item.AdminRemarks,

                        };
                    context.LessonBookings.Add(obj);
                    context.SaveChanges();

                }

                var obj1 = new AllNotification
                    {
                            CourseBookingIdForLesson = Convert.ToInt64(CourseBookingId),
                        ForAdmin = true,
                        Notification = $"Lessons Booking Of {CourseBooking.Courses.Name} Course Need To Be Approved"
                    };
                context.AllNotifications.Add(obj1);
                context.SaveChanges();


                if (UserRole == "Student")
                {
                    NavigationManager.NavigateTo($"/StudentBookedCourse/{UserId}");
                }
                else if (UserRole == "Admin")
                {
                    NavigationManager.NavigateTo($"/AdminBookedCourse/{UserId}");
                }
                else if (UserRole == "Tutor")
                {
                    NavigationManager.NavigateTo($"/TutorBookedCourse/{UserId}");
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
        else
        {
            JSRuntime.InvokeVoidAsync("alert", "Fill All Fields Correctly");
        }
        }
        catch (Exception)
        {

            throw;
        }
    }



    internal async Task HandleInvalidSubmit()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToFirstError");
        }
        catch (Exception ex)
        {
            // Handle exception here
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private void FirstSlot(ChangeEventArgs e)
    {
        try
        {
            FirstTimeSlotDateTime = Convert.ToDateTime(e.Value);
            FirstDate = FirstTimeSlotDateTime;
            DateRefresh();
        }
        catch (Exception)
        {
            
            throw;
        }
    }

    private void SecondSlot(ChangeEventArgs e)
    {
        try
        {
            SecondTimeSlotDateTime = Convert.ToDateTime(e.Value);

            SecondDate = SecondTimeSlotDateTime;
            DateRefresh();
        }
        catch (Exception)
        {
            
            throw;
        }
    }
    private void ThirdSlot(ChangeEventArgs e)
    {
        try
        {
            ThirdTimeSlotDateTime = Convert.ToDateTime(e.Value);

            ThirdDate = ThirdTimeSlotDateTime;
            DateRefresh();
        }
        catch (Exception)
        {
            
            throw;
        }
    }
    private void DateRefresh()
    {
        try
        {
            FirstTimeSlotDateTime = FirstDate;
            SecondTimeSlotDateTime = SecondDate;
            ThirdTimeSlotDateTime = ThirdDate;
        }
        catch (Exception)
        {
            
            throw;
        }
    }
}
