// <auto-generated />
using System;
using IGB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IGB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240728174230_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IGB.Models.Admin.AdminDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("AdminDocuments");
                });

            modelBuilder.Entity("IGB.Models.Admin.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CurriculumId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("IGB.Models.Admin.CourseTopic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseTopics");
                });

            modelBuilder.Entity("IGB.Models.Admin.Curriculum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("IGB.Models.Admin.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("IGB.Models.Admin.GradeCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeId");

                    b.ToTable("GradeCourses");
                });

            modelBuilder.Entity("IGB.Models.AllNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CourseBookingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CourseBookingIdForLesson")
                        .HasColumnType("bigint");

                    b.Property<bool>("ForAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("ForStudent")
                        .HasColumnType("bit");

                    b.Property<string>("ForStudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ForTutor")
                        .HasColumnType("bit");

                    b.Property<string>("ForTutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprovedByStudent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprovedByTutor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByStudent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByTutor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejectedByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejectedByStudent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejectedByTutor")
                        .HasColumnType("bit");

                    b.Property<long?>("LessonBookingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LessonBookingStartId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NewUserRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StudentFeedbackId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TutorFeedbackId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseBookingId");

                    b.HasIndex("CourseBookingIdForLesson");

                    b.HasIndex("ForStudentId");

                    b.HasIndex("ForTutorId");

                    b.HasIndex("LessonBookingId");

                    b.HasIndex("LessonBookingStartId");

                    b.HasIndex("NewUserId");

                    b.HasIndex("StudentFeedbackId");

                    b.HasIndex("TutorFeedbackId");

                    b.ToTable("AllNotifications");
                });

            modelBuilder.Entity("IGB.Models.CourseBooking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CourseBookingDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Detail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdminApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdminRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTutorApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTutorRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("Marker")
                        .HasColumnType("bit");

                    b.Property<bool>("Smooth")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TutorRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("CourseBookings");
                });

            modelBuilder.Entity("IGB.Models.Feedback.StudentFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DidTutorClearDoubtPrevious")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DidTutorClearDoubtPreviousScore")
                        .HasColumnType("float");

                    b.Property<string>("DidTutorClearDoubtToday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DidTutorClearDoubtTodayScore")
                        .HasColumnType("float");

                    b.Property<string>("DidTutorExplainTopic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DidTutorExplainTopicScore")
                        .HasColumnType("float");

                    b.Property<double?>("FinalScore")
                        .HasColumnType("float");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<long?>("LessonBookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("RateTutorTeaching")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RateTutorTeachingScore")
                        .HasColumnType("float");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnderstandingAndEngagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("UnderstandingAndEngagementScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LessonBookingId")
                        .IsUnique()
                        .HasFilter("[LessonBookingId] IS NOT NULL");

                    b.ToTable("StudentFeedbacks");
                });

            modelBuilder.Entity("IGB.Models.Feedback.TutorFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Announcement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AverageGradePrediction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FinalScore")
                        .HasColumnType("float");

                    b.Property<string>("GradePrediction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("GradePredictionScore")
                        .HasColumnType("float");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<long?>("LessonBookingId")
                        .HasColumnType("bigint");

                    b.Property<double?>("MentalSkills")
                        .HasColumnType("float");

                    b.Property<string>("NextHomework")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("NextHomeworkFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("ObtainedScore")
                        .HasColumnType("float");

                    b.Property<double?>("Percentage")
                        .HasColumnType("float");

                    b.Property<double?>("PercentageScore")
                        .HasColumnType("float");

                    b.Property<bool>("PreviousHomeWorkDiscussed")
                        .HasColumnType("bit");

                    b.Property<bool>("PreviousHomeWorkDone")
                        .HasColumnType("bit");

                    b.Property<double?>("PreviousHomeWorkDoneScore")
                        .HasColumnType("float");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("TestFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicCoveredToday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TopicUnderstandingLevel")
                        .HasColumnType("float");

                    b.Property<double?>("TotalScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LessonBookingId")
                        .IsUnique()
                        .HasFilter("[LessonBookingId] IS NOT NULL");

                    b.ToTable("TutorFeedbacks");
                });

            modelBuilder.Entity("IGB.Models.LessonBooking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdminRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CourseBookingId")
                        .HasColumnType("bigint");

                    b.Property<double?>("CreditCharged")
                        .HasColumnType("float");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("EstimatedCreditCharged")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FirstTimeSlot")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdminApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdminRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSessionEnded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSessionInitiated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudentApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudentPresent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudentRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTutorApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTutorPresent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTutorRejected")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LessonBookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessonBookingInitiatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SecondTimeSlot")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SelectedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionEndeddBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionInitiatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("SessionStudentTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SessionTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SessionTutorTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StudentCheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StudentClassStartAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StudentComingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("StudentScore")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ThirdTimeSlot")
                        .HasColumnType("datetime2");

                    b.Property<string>("TopicCovered")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TutorCheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TutorClassStartAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TutorComingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TutorRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TutorScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseBookingId");

                    b.ToTable("LessonBookings");
                });

            modelBuilder.Entity("IGB.Models.StudentCredit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CourseBookingId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Credit")
                        .HasColumnType("float");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseBookingId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCredits");
                });

            modelBuilder.Entity("IGB.Models.Tutor.TutorDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TutorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorDocuments");
                });

            modelBuilder.Entity("IGB.Models.Tutor.TutorEducation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntermediateLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatriculationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherIntermediateLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherMatriculationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("TutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UniversityLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorEducations");
                });

            modelBuilder.Entity("IGB.Models.Tutor.TutorExperience", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CurriculumId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurriculumName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("InstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEndYear")
                        .HasColumnType("bit");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("TutorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorExperiences");
                });

            modelBuilder.Entity("IGB.Models.Tutor.TutorSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CurriculumId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurriculumName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<string>("GradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TutorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("GradeId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorSpecialitys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IGB.Models.Users.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "ad98681d-5abb-4df9-9a9d-4797888220ac",
                            ConcurrencyStamp = "738ede22-b7d9-475a-bb28-5a5058350a37",
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = "de8dc073-416f-4716-89be-b1c48c9f9de1",
                            ConcurrencyStamp = "cdfbb1eb-c26c-4662-897a-649775ef8bd3",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "2c98e431-4a03-4999-807d-d7ac6ebedac9",
                            ConcurrencyStamp = "29b705bc-f203-4401-bb9b-b052456a3449",
                            Name = "Tutor"
                        },
                        new
                        {
                            Id = "feb14f16-e7ac-43bf-9bd2-e7de8d1ba71d",
                            ConcurrencyStamp = "aa48445e-1746-4525-b94d-b26283394355",
                            Name = "Student"
                        },
                        new
                        {
                            Id = "a2204359-8a88-49c9-867f-a2dd15e3f7c8",
                            ConcurrencyStamp = "59f8dcf7-b7e8-4731-97c4-fb8652ed0f51",
                            Name = "Guardian"
                        });
                });

            modelBuilder.Entity("IGB.Models.Users.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<byte[]>("Contract")
                        .HasColumnType("varbinary(max)");

                    b.Property<long?>("CurriculumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ExtraCaring")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContracttUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDocumentUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEducationUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExperienceUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstGuardian")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstGuardianUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecondGuardian")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecondGuardianUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecialiitiesUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTutor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherEmployeeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegularIrregular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipWithStudent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidingCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Update")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsappNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("GradeId");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "b9055214-c3b3-4f05-b383-b6e601042b35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6947db82-43e2-4974-8820-275aa5302715",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBy+nQwjwzI0Obd1HeJIb/VfZArTILlvoj8Nd0iHd0HY4y8pgav9ZvLVDx4gTcnoiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f175fb0-7da8-42b7-ad22-fdc734ada25a",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com",
                            ExtraCaring = false,
                            FirstName = "SuperAdmin",
                            IsActive = false,
                            IsAdmin = false,
                            IsContracttUpdated = false,
                            IsDeleted = false,
                            IsDocumentUpdated = false,
                            IsEducationUpdated = false,
                            IsExperienceUpdated = false,
                            IsFirstGuardian = false,
                            IsFirstGuardianUpdated = false,
                            IsProfileUpdated = false,
                            IsSecondGuardian = false,
                            IsSecondGuardianUpdated = false,
                            IsSpecialiitiesUpdated = false,
                            IsStudent = false,
                            IsSuperAdmin = true,
                            IsTutor = false,
                            IsUpdated = true,
                            RoleName = "SuperAdmin",
                            Update = "Not Updated"
                        });
                });

            modelBuilder.Entity("IGB.Models.Users.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "b9055214-c3b3-4f05-b383-b6e601042b35",
                            RoleId = "ad98681d-5abb-4df9-9a9d-4797888220ac"
                        });
                });

            modelBuilder.Entity("IGB.Models.Admin.AdminDocument", b =>
                {
                    b.HasOne("IGB.Models.Users.ApplicationUser", "ApplicationUsers")
                        .WithMany("AdminDocuments")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("IGB.Models.Admin.Course", b =>
                {
                    b.HasOne("IGB.Models.Admin.Curriculum", "Curriculums")
                        .WithMany("Courses")
                        .HasForeignKey("CurriculumId");

                    b.Navigation("Curriculums");
                });

            modelBuilder.Entity("IGB.Models.Admin.CourseTopic", b =>
                {
                    b.HasOne("IGB.Models.Admin.Course", "Courses")
                        .WithMany("CourseTopics")
                        .HasForeignKey("CourseId");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("IGB.Models.Admin.GradeCourse", b =>
                {
                    b.HasOne("IGB.Models.Admin.Course", "Courses")
                        .WithMany("GradeCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("IGB.Models.Admin.Grade", "Grades")
                        .WithMany("GradeCourses")
                        .HasForeignKey("GradeId");

                    b.Navigation("Courses");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("IGB.Models.AllNotification", b =>
                {
                    b.HasOne("IGB.Models.CourseBooking", "CourseBookings")
                        .WithMany()
                        .HasForeignKey("CourseBookingId");

                    b.HasOne("IGB.Models.CourseBooking", "CourseBookingIdForLessons")
                        .WithMany()
                        .HasForeignKey("CourseBookingIdForLesson");

                    b.HasOne("IGB.Models.Users.ApplicationUser", "StudentApplicationUsers")
                        .WithMany()
                        .HasForeignKey("ForStudentId");

                    b.HasOne("IGB.Models.Users.ApplicationUser", "TutorApplicationUsers")
                        .WithMany()
                        .HasForeignKey("ForTutorId");

                    b.HasOne("IGB.Models.LessonBooking", "LessonBookings")
                        .WithMany()
                        .HasForeignKey("LessonBookingId");

                    b.HasOne("IGB.Models.LessonBooking", "LessonBookingStarts")
                        .WithMany()
                        .HasForeignKey("LessonBookingStartId");

                    b.HasOne("IGB.Models.Users.ApplicationUser", "NewApplicationUsers")
                        .WithMany()
                        .HasForeignKey("NewUserId");

                    b.HasOne("IGB.Models.Feedback.StudentFeedback", "StudentFeedbacks")
                        .WithMany()
                        .HasForeignKey("StudentFeedbackId");

                    b.HasOne("IGB.Models.Feedback.TutorFeedback", "TutorFeedbacks")
                        .WithMany()
                        .HasForeignKey("TutorFeedbackId");

                    b.Navigation("CourseBookingIdForLessons");

                    b.Navigation("CourseBookings");

                    b.Navigation("LessonBookingStarts");

                    b.Navigation("LessonBookings");

                    b.Navigation("NewApplicationUsers");

                    b.Navigation("StudentApplicationUsers");

                    b.Navigation("StudentFeedbacks");

                    b.Navigation("TutorApplicationUsers");

                    b.Navigation("TutorFeedbacks");
                });

            modelBuilder.Entity("IGB.Models.CourseBooking", b =>
                {
                    b.HasOne("IGB.Models.Users.ApplicationUser", "AdminApplicationUsers")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("IGB.Models.Admin.Course", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("IGB.Models.Users.ApplicationUser", "StudentApplicationUsers")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("IGB.Models.Users.ApplicationUser", "TutorApplicationUsers")
                        .WithMany()
                        .HasForeignKey("TutorId");

                    b.Navigation("AdminApplicationUsers");

                    b.Navigation("Courses");

                    b.Navigation("StudentApplicationUsers");

                    b.Navigation("TutorApplicationUsers");
                });

            modelBuilder.Entity("IGB.Models.Feedback.StudentFeedback", b =>
                {
                    b.HasOne("IGB.Models.LessonBooking", "LessonBookings")
                        .WithOne("StudentFeedbacks")
                        .HasForeignKey("IGB.Models.Feedback.StudentFeedback", "LessonBookingId");

                    b.Navigation("LessonBookings");
                });

            modelBuilder.Entity("IGB.Models.Feedback.TutorFeedback", b =>
                {
                    b.HasOne("IGB.Models.LessonBooking", "LessonBookings")
                        .WithOne("TutorFeedbacks")
                        .HasForeignKey("IGB.Models.Feedback.TutorFeedback", "LessonBookingId");

                    b.Navigation("LessonBookings");
                });

            modelBuilder.Entity("IGB.Models.LessonBooking", b =>
                {
                    b.HasOne("IGB.Models.CourseBooking", "CourseBookings")
                        .WithMany("LessonBookings")
                        .HasForeignKey("CourseBookingId");

                    b.Navigation("CourseBookings");
                });

            modelBuilder.Entity("IGB.Models.StudentCredit", b =>
                {
                    b.HasOne("IGB.Models.CourseBooking", "CourseBooking")
                        .WithMany("StudentCredits")
                        .HasForeignKey("CourseBookingId");

                    b.HasOne("IGB.Models.Users.ApplicationUser", "ApplicationUsers")
                        .WithMany("StudentCredits")
                        .HasForeignKey("StudentId");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("CourseBooking");
                });

            modelBuilder.Entity("IGB.Models.Tutor.TutorDocument", b =>
                {
                    b.HasOne("IGB.Models.Users.ApplicationUser", "ApplicationUsers")
                        .WithMany("TutorDocuments")
                        .HasForeignKey("TutorId");

                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("IGB.Models.Tutor.TutorEducation", b =>
                {
                    b.HasOne("IGB.Models.Users.ApplicationUser", "ApplicationUsers")
                        .WithMany("TutorEducations")
                        .HasForeignKey("TutorId");

                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("IGB.Models.Tutor.TutorExperience", b =>
                {
                    b.HasOne("IGB.Models.Admin.Course", "Courses")
                        .WithMany("TutorExperience")
                        .HasForeignKey("CourseId");

                    b.HasOne("IGB.Models.Admin.Curriculum", "Curriculums")
                        .WithMany("TutorExperiences")
                        .HasForeignKey("CurriculumId");

                    b.HasOne("IGB.Models.Users.ApplicationUser", "ApplicationUsers")
                        .WithMany("TutorExperiences")
                        .HasForeignKey("TutorId");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Courses");

                    b.Navigation("Curriculums");
                });

            modelBuilder.Entity("IGB.Models.Tutor.TutorSpeciality", b =>
                {
                    b.HasOne("IGB.Models.Admin.Course", "Courses")
                        .WithMany("TutorSpecialitys")
                        .HasForeignKey("CourseId");

                    b.HasOne("IGB.Models.Admin.Curriculum", "Curriculums")
                        .WithMany("TutorSpecialitys")
                        .HasForeignKey("CurriculumId");

                    b.HasOne("IGB.Models.Admin.Grade", "Grades")
                        .WithMany("TutorSpecialitys")
                        .HasForeignKey("GradeId");

                    b.HasOne("IGB.Models.Users.ApplicationUser", "ApplicationUsers")
                        .WithMany("TutorSpecialitys")
                        .HasForeignKey("TutorId");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Courses");

                    b.Navigation("Curriculums");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IGB.Models.Users.ApplicationUser", b =>
                {
                    b.HasOne("IGB.Models.Admin.Curriculum", "Curriculums")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CurriculumId");

                    b.HasOne("IGB.Models.Admin.Grade", "Grades")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("GradeId");

                    b.HasOne("IGB.Models.Users.ApplicationUser", "StudentApplicationUsers")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Curriculums");

                    b.Navigation("Grades");

                    b.Navigation("StudentApplicationUsers");
                });

            modelBuilder.Entity("IGB.Models.Admin.Course", b =>
                {
                    b.Navigation("CourseTopics");

                    b.Navigation("GradeCourses");

                    b.Navigation("TutorExperience");

                    b.Navigation("TutorSpecialitys");
                });

            modelBuilder.Entity("IGB.Models.Admin.Curriculum", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Courses");

                    b.Navigation("TutorExperiences");

                    b.Navigation("TutorSpecialitys");
                });

            modelBuilder.Entity("IGB.Models.Admin.Grade", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("GradeCourses");

                    b.Navigation("TutorSpecialitys");
                });

            modelBuilder.Entity("IGB.Models.CourseBooking", b =>
                {
                    b.Navigation("LessonBookings");

                    b.Navigation("StudentCredits");
                });

            modelBuilder.Entity("IGB.Models.LessonBooking", b =>
                {
                    b.Navigation("StudentFeedbacks");

                    b.Navigation("TutorFeedbacks");
                });

            modelBuilder.Entity("IGB.Models.Users.ApplicationUser", b =>
                {
                    b.Navigation("AdminDocuments");

                    b.Navigation("StudentCredits");

                    b.Navigation("TutorDocuments");

                    b.Navigation("TutorEducations");

                    b.Navigation("TutorExperiences");

                    b.Navigation("TutorSpecialitys");
                });
#pragma warning restore 612, 618
        }
    }
}
